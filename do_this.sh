#!/bin/bash

# Check if the script is running in a Python 3 virtual environment
#if [[ -z "$VIRTUAL_ENV" ]]; then
#    echo -e "Error: This script must be run inside a Python 3 virtual environment."
#    exit 1
#fi

NRM="\033[0m" # Normal
YLW="\033[1m\033[1;33m" # Yellow
RED="\033[1m\033[1;91m" # Red
GRN="\033[1m\033[1;92m" # Green
WHT="\033[1m\033[1;97m" # White
PRP="\033[1m\033[35m" # Magenta (Purple)
DEBUG=FALSE

AFPB="io.github.evilsupahfly.amulet_flatpak"
AFPREPO="${AFPB}-repo"
AFP_YML="${AFPB}.yaml"
AFP_XML="${AFPB}.metainfo.xml"

doHelp() {
    echo -e "${GRN}\nThis little script will build a local repository for the amulet-flatpak."
    echo -e "Upon completion, it assembles \"${WHT}amulet.flatpak${GRN}\" from the local repo."
    echo -e "\nYou can run it like this:"
    echo -e "${YLW}    $0 --just-build"
    echo -e "\n${GRN}\nRunning ${WHT}--just-build${GRN} exits after building the flatpak and repo."
    echo -e "\n \n${YLW}    $0 --do-pip"
    echo -e "Without explicitly running with ${WHT}--do-pip${GRN} this will skip running"
    echo -e "${WHT}flatpak-pip-generator${GRN} to generate a new \"pip-gen.yaml\"."
    echo -e "\nHowever, if ${WHT}$AFP_YML${GRN} or"
    echo -e "${WHT}pip-gen.yaml ${GRN}don't exist, ${RED}this WILL break. ${GRN}Buyer beware, and all that jazz.\n"
    echo -e "\n \n${YLW}    $0 --auto"
    echo -e "\nYou can also specify ${WHT}--auto${GRN} and this script will also (try)"
    echo -e "to automatically install and run ${WHT}amulet-x86_64.flatpak${GRN} for you."
    echo -e "Limited error checking is included for each step so ${RED}if one step fails${GRN},"
    echo -e "we won't just continue to ${RED}blindly muddle through${GRN} to the next step and"
    echo -e "we will instead try to ${WHT}exit gracefully."
    echo -e "\n \n${YLW}    $0 --debug"
    echo -e "\n${GRN}I've also included a ${WHT}--debug ${GRN}option to allow troubleshooting"
    echo -e "of the Amulet Flatpak ${YLW}inside ${GRN}the flatpak sandbox, if neccessary.${NRM}\n"
    echo -e "\n \n${YLW}    $0"
    echo -e "${YLW}    $0 --help"
    echo -e "${GRN}Running with no options or with ${WHT}--help${GRN} displays this help text.\n${NRM}"
}

# Function to report after process completions
report() {
    local status=$1 # F = failure, P = pass
    local message=$2
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")

    if [[ "$status" == "F" ]]; then
        echo -e "\n${RED}[$timestamp] ERROR: $message\n${NRM}"
    elif [[ "$status" == "P" ]]; then
        echo -e "\n${WHT}[$timestamp] SUCCESS: $message\n${NRM}"
    fi
}

function doFlatpakPIP {
    # Generate everything we need to build Amulet in the Flatpak sandbox
    if ! ./flatpak-pip-generator --requirements-file=requirements.txt --yaml --output=pip-gen; then
        report F "flatpak-pip-generator failed."
        exit 1
    fi

    # Create the initial header for our primary manifest
cat << EOL > "$AFP_YML"
#### Generated by do_this.sh >>>
id: $AFPB
name: Amulet Map Editor
#version: 0.10.36
runtime: org.freedesktop.Platform
runtime-version: '24.08'
sdk: org.freedesktop.Sdk
command: amulet_map_editor

finish-args:
  - --device=all
  - --share=network
  - --share=ipc
  - --socket=fallback-x11
  - --socket=wayland
  - --filesystem=home:persistent
  - --filesystem=~/.cache:persistent
  - --filesystem=host:create
  - --env=LIBGL_ALWAYS_SOFTWARE="0"
  - --env=OPENGL_VERSION=3.3
  - --env=OPENGL_LIB=/usr/lib/x86_64-linux-gnu/libGL.so
  - --env=PYTHONDEBUG=3
  - --env=PYTHONVERBOSE=3
  - --env=PYTHONTRACEMALLOC=10
# According to the official docs (https://docs.flatpak.org/en/latest/sandbox-permissions.html), the following directories are blacklisted:
# - /lib, /lib32, /lib64, /bin, /sbin, /usr, /boot, /root, /tmp, /etc, /app, /run, /proc, /sys, /dev, /var
# Meaning you can't give an app access to them even using the override method.
modules:
  - shared-modules/glew/glew.json
  - shared-modules/glu/glu-9.json
  - pip-gen.yaml
  - name: metainfo-xml
    buildsystem: simple
    build-commands:
      - install -Dm644 io.github.evilsupahfly.amulet_flatpak.metainfo.xml -t ${FLATPAK_DEST}/share/metainfo/
    sources:
      - type: file
        path: io.github.evilsupahfly.amulet_flatpak.metainfo.xml
  - name: metainfo-ico
    buildsystem: simple
    build-commands:
      - install -Dm644 io.github.evilsupahfly.amulet_flatpak.png -t ${FLATPAK_DEST}/share/icons/hicolor/256x256/apps/
    sources:
      - type: file
        path: io.github.evilsupahfly.amulet_flatpak.png
  - name: metainfo-desktop
    buildsystem: simple
    build-commands:
      - install -Dm755 io.github.evilsupahfly.amulet_flatpak.desktop -t ${FLATPAK_DEST}/share/applications/
    sources:
      - type: file
        path: io.github.evilsupahfly.amulet_flatpak.desktop
        
#### <<< Generated by do_this.sh
EOL

report P "flatpak-pip-generator succeeded!"
}

echo -e "\n\n${WHT}--------------------------------"
echo -e "| ${RED}PRELIMINARY CHECKS INITIATED ${WHT}|"
echo -e "--------------------------------${NRM}\n"
sleep 1

echo -e "\n \n${WHT}Checking version number from $AFP_YML...\n"; sleep 2

if [[ ! -f "$AFP_YML" ]]; then
    report F "Error: File '$AFP_YML' not found. \n"
    exit 1
else
    AFP_VER=$(grep '^version:' "$AFP_YML" | awk '{print $2}')
    report P "${WHT}Amulet Flatpak version is: $AFP_VER\n"
fi

# Check if Flathub is installed at the user level
echo -e "\n${WHT}Checking for Flathub...\n"
if ! flatpak remote-list --user | grep -q "flathub"; then
    report F "\n${RED}Flathub is not installed. ${WHT}Adding Flathub repository...\n"
    if ! flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo; then
        report F "${RED}Flathub repository couldn't be added.\n${NRM}"
        exit 1
    else
        report P "${GRN}Flathub repository added successfully.${NRM}\n"
    fi
else
    report P "${GRN}Flathub already installed. ${WHT}Checking for updates...\n"; sleep 2
    flatpak update -y -u
    echo -e "\n \n"
fi

# Check if Flathub is installed at the user level
echo -e "${WHT}Checking for Flatpak Builder...\n"; sleep 2
if ! flatpak list | grep -q "org.flatpak.Builder"; then
    report F "\n${RED}Flatpak Builder not found. ${WHT}Attempting to install...\n${NRM}"; sleep 2
    if ! flatpak install --user -y org.flatpak.Builder; then
        report F "\n${RED}Fatal Error: Flatpak Builder couldn't be installed.\n${NRM}"
        exit 1
    fi
else
    report P "${WHT}org.flatpak.Builder is present.\n"; sleep 2
fi

# Check for AppStream (appstreamcli), install if it's missing
echo -e "\n${WHT}Checking for AppStream...\n"; sleep 2

if ! command -v appstreamcli &> /dev/null; then
    report F "${RED}AppStream not found.\n${WHT}Checking distribution..."

    # Determine the distribution
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        DISTRO=$ID
        report P "${WHT}Attempting install for ${YLW}$DISTRO${WHT}...\n${NRM}"; sleep 2
        echo -e "\n\n"
    fi

    # Determine the package manager and install appstreamcli
    case $DISTRO in
        ubuntu|debian)
            apt update && sudo apt install -y appstream
            ;;
        fedora)
            sudo dnf install -y appstream
            ;;
        centos|rhel)
            sudo yum install -y appstream
            ;;
        arch)
            sudo pacman -Syu appstream
            ;;
        *)
            report F "${RED}Unsupported distribution: $DISTRO. \n${WHT}Please manually install using your platform's package manager.\n${NRM}"
            exit 1
            ;;
    esac
    # Check if installation was successful
    echo -e "\n"
    if ! command -v appstreamcli &> /dev/null; then
        report F "${RED}Installation via package manager failed. \n${WHT}Try installing manually.\n${NRM}"
        exit 1
    fi
else
    report P "${GRN}AppStream located at: ${WHT}$(command -v appstreamcli)\n${NRM}"; sleep 2
fi

echo -e "\n${WHT}--------------------------------"
echo -e "|${RED} PRELIMINARY CHECKS COMPLETED ${WHT}|"
echo -e "--------------------------------${NRM}\n"
sleep 1

for arg in "$@"; do
    if [ "$arg" == "--do-pip" ]; then
        echo -e "\n${GRN}    Proceeding with ${YLW}flatpak-pip-generator${GRN}....${NRM}\n"
        sleep 1
        doFlatpakPIP
    elif [[ -z "$arg" || "$arg" == "--help" ]]; then
        doHelp
        exit 0
    elif [ "$arg" == "--just-build" ]; then
        echo -e "\n${WHT}Skipping ${RED}DEBUG ${WHT}and ${RED}AUTO ${WHT}modes.\n"
        sleep 1
    elif [ "$arg" == "--debug" ]; then
        DEBUG=TRUE
        echo -e "\n${WHT}----------------------"
        echo -e "|${RED} DEBUG MODE ACTIVE. ${WHT}|"
        echo -e "----------------------${NRM}\n"
        sleep 1
    else
        echo -e "\n${WHT}    Skipping ${YLW}flatpak-pip-generator${WHT}, starting ${YLW}flatpak-builder${WHT}.${NRM}\n"
        sleep 1
    fi
done

# Attempt to build Frankenstein's Monster - change "tag" when updating to newer Amulet versions
echo -e "\n${WHT}flatpak-builder -vvv --user --install-deps-from=flathub --add-tag=$AFP_VER --bundle-sources --repo=$AFPREPO amulet-flatpak_build_dir $AFP_YML --force-clean\n${GRN}"
if ! flatpak-builder -vvv --user --install-deps-from=flathub --add-tag=$AFP_VER --bundle-sources --repo=$AFPREPO amulet-flatpak_build_dir $AFP_YML --force-clean; then
    report F "flatpak-builder failed. \n"
    exit 1
fi

report P "flatpak-builder succeeded! \n"

# Bundle the contents of the local repository into "amulet-x86_64.flatpak"
echo -e "${WHT}flatpak build-bundle -vvv $AFPREPO $AFPB${WHT}\n"
if ! flatpak build-bundle -vvv $AFPREPO amulet-x86_64.flatpak $AFPB; then
    report F "flatpak build-bundle failed.\n"
    exit 1
fi

report P "flatpak build-bundle succeeded! \n"

for arg in "$@"; do
    if [ "$arg" == "--auto" ]; then
        # Install bundle
        echo -e "\n${WHT}---------------------"
        echo -e "|${YLW} AUTO MODE ACTIVE. ${WHT}|"
        echo -e "---------------------${NRM}\n"
        echo -e "\n${YLW}    Installing bundle...\n${WHT}"
        if ! flatpak install --include-sdk --include-debug -vvv -y -u amulet-x86_64.flatpak; then
            report F "flatpak install failed. \n"
            exit 1
        else
            report P "flatpak install succeeded! \n"
        fi
        # Run bundle with optional output verbosity (-v, -vv, -vvv)
        if DEBUG=TRUE; then
            echo -e "\n${RED}    Running flatpak in debug mode...\n${WHT}"
            echo -e "\n${YLW}    Once inside, type '${RED}python -vvv -m pdb -m amulet_map_editor${YLW}' to run Amulet though ${WHT}PDB${YLW}.\n${NRM}\n"
            flatpak-builder --run amulet-flatpak_build_dir $AFP_YML sh
            exit 0
        elif DEBUG=FALSE; then
            echo -e "\n${YLW}    Running flatpak...\n${WHT}"
            if ! flatpak run -vvv $AFPB; then
                report F "Amulet crashed. Review Traceback logs for details. \n"
                exit 1
            else
                report P "It works! \n"
            fi
        fi
    fi
done

echo -e "${WHT}The last word and some help for terminal users.\n"
echo -e "\n${YLW}    To install or reinstall the Amulet Flatpak manually, type:"
echo -e "${WHT}        flatpak install -u amulet-x86_64.flatpak"
echo -e "\n${YLW}    To run your installed flatpak manually, type:"
echo -e "${WHT}        flatpak run $AFPB"
echo -e "\n${YLW}    To run the Amulet Flatpak manually in debug mode, type:"
echo -e "${WHT}        flatpak-builder --run amulet-flatpak_build_dir $AFP_YML sh"
echo -e "${YLW}    Once inside the flatpak shell, type:"
echo -e "${WHT}        python -vvv -m pdb -m amulet_map_editor"
echo -e "\n${YLW}    To uninstall the Amulet flatpak, type:"
echo -e "${RED}        flatpak uninstall $AFPB \n \n"

